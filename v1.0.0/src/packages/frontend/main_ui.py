# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
from PyQt5.QtWidgets import *
from PyQt5 import QtCore, QtGui
from PyQt5.QtGui import *
from PyQt5 .QtCore import *
import sys
import os
from PyQt5.QtWidgets import QApplication
from PyQt5.QtCore import QFile, QTextStream
from PyQt5.QtCore import QThread, pyqtSignal
from PyQt5.QtWidgets import QMainWindow, QApplication
from PyQt5 import QtCore, QtGui, QtWidgets
from packages.backend.user_options.user_options import user_options
from packages.backend.user_options.option_one_driver import user_option_one_driver
from packages.backend.gpt_driver.gpt_driver import validate_api_key
from packages.frontend.classes.worker import Worker
from packages.frontend.classes.scroll_label import ScrollLabel
from packages.frontend.resources import resources_rc
from packages.backend.progress_tracker.global_instance import progress_tracker
from PyQt5.QtCore import pyqtSlot as pyQtSlot
from packages.backend.gpt_driver import gpt_driver
import qdarktheme

# =================================
# APP CLASS
class Ui_MainWindow(QtWidgets.QMainWindow):  # Make Ui_MainWindow inherit from QMainWindow
    def __init__(self, *args, **kwargs):
        super(Ui_MainWindow, self).__init__(*args, **kwargs)
        # self.setWindowIcon(QtGui.QIcon('icon.png'))
        self.setupUi(self)
        self.progress_tracker = progress_tracker
        self.progress_tracker.update_progress.connect(self.progressBar.setValue)
        self.worker = Worker()  # Initialize the worker object
        self.worker.taskFinished.connect(self.update_output)  # Connect taskFinished signal to a slot
        self.worker.update_progress_bar.connect(self.update_progress)
        self.api_key = ""
        self.api_key_entry_in_progress = False
        self.reset_button.clicked.connect(self.reset_button_clicked)  # Connect reset button to its handler
        self.reset_button.setEnabled(False)  # Disable reset button at start
        # self.worker.taskFailed.connect(self.handle_task_failed)  # connect the taskFailed signal to its handler
        self.worker.taskFinished.connect(self.handle_task_finished)
        
    @pyQtSlot(int)
    def update_progress(self, value):
        self.progress.setValue(value)
    
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(795, 600)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/app_icon/icons/app_icon.svg"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setIconSize(QtCore.QSize(256, 256))
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        
        # =================================
        # API BUTTON CONTENTS
        self.api_input_widget = QtWidgets.QWidget(self.centralwidget)
        self.api_input_widget.setGeometry(QtCore.QRect(0, 0, 461, 71))
        self.api_input_widget.setObjectName("api_input_widget")

        self.activate_button = QtWidgets.QPushButton(self.api_input_widget)
        self.activate_button.clicked.connect(self.activate_button_clicked)
        self.activate_button.setGeometry(QtCore.QRect(349, 30, 111, 31))

        font = QtGui.QFont()
        font.setFamily("Myanmar Text")
        font.setBold(True)
        font.setWeight(75)

        self.activate_button.setFont(font)
        self.activate_button.setObjectName("activate_button")

        self.api_key_input = QtWidgets.QLineEdit(self.api_input_widget)
        self.api_key_input.setGeometry(QtCore.QRect(10, 30, 330, 31))
        self.api_key_input.setAlignment(QtCore.Qt.AlignCenter)
        self.api_key_input.setObjectName("lineEdit")
        self.api_key_input.textChanged.connect(self.handle_text_changed)  # Connects to handle_text_changed method

        self.api_key_label= QtWidgets.QLabel(self.api_input_widget)
        self.api_key_label.setGeometry(QtCore.QRect(20, 10, 321, 16))

        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)

        self.api_key_label.setFont(font)
        self.api_key_label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.api_key_label.setAlignment(QtCore.Qt.AlignCenter)
        self.api_key_label.setObjectName("label")
        
        # =================================
        
        
        # =================================
        # Scroll Wheel Output Label
        self.output_widget = QtWidgets.QWidget(self.centralwidget)
        self.output_widget.setGeometry(QtCore.QRect(460, 0, 341, 601))
        self.output_widget.setObjectName("output_widget")
        self.output_label = ScrollLabel(self.output_widget)
        self.output_label.setGeometry(QtCore.QRect(10, 10, 321, 531))
        font = QtGui.QFont()
        font.setPointSize(11)
        self.output_label.setFont(font)
        self.output_label.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.output_label.setFrameShape(QtWidgets.QFrame.Box)
        self.output_label.setFrameShadow(QtWidgets.QFrame.Plain)
        self.output_label.setAlignment(QtCore.Qt.AlignHCenter)
        self.output_label.setLineWidth(2)
        # =================================
        
        # =================================
        # USER OPTIONS CONTENTS
        self.option_picker_widget = QtWidgets.QWidget(self.centralwidget)
        self.option_picker_widget.setGeometry(QtCore.QRect(0, 70, 461, 531))
        self.option_picker_widget.setObjectName("option_picker_widget")
        self.option_picker_widget.hide() # Hide at start to avoid error
        self.option_1 = QtWidgets.QPushButton(self.option_picker_widget, clicked = lambda:self.press_it(1))
        self.option_1.setGeometry(QtCore.QRect(20, 20, 421, 41))
        self.option_1.setObjectName("option_1")
        MainWindow.setCentralWidget(self.centralwidget)
        # =================================
        
        # =================================
        # PROGRESS BAR
        self.progress_widget = QtWidgets.QWidget(self.centralwidget)
        self.progress_widget.setGeometry(QtCore.QRect(0, 540, 461, 61))
        self.progress_widget.setObjectName("progress_widget")
        self.progressBar = QtWidgets.QProgressBar(self.progress_widget)
        self.progressBar.setGeometry(QtCore.QRect(10, 20, 441, 23))
        self.progressBar.setProperty("value", 0)
        self.progressBar.setOrientation(QtCore.Qt.Horizontal)
        self.progressBar.setInvertedAppearance(False)
        self.progressBar.setObjectName("progressBar")
        
        # Set the maximum value of the progress bar
        self.progressBar.setMaximum(25)
        
        MainWindow.setCentralWidget(self.centralwidget)
        # =================================
        
        # =================================
        # RESET BUTTON
        self.reset_button = QtWidgets.QPushButton(self.output_widget)
        self.reset_button.setGeometry(QtCore.QRect(10, 560, 321, 28))
        self.reset_button.setObjectName("reset_button")
        # =================================

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Stock Contender"))
        self.activate_button.setText(_translate("MainWindow", "Activate"))
        self.api_key_label.setText(_translate("MainWindow", "Enter your open AI API KEY below"))
        self.output_label.setText(_translate("MainWindow", "Welcome To Stock Contender!"))
        self.option_1.setText(_translate("MainWindow", "Option 1: Retreive top 3 picks of the day"))
        self.reset_button.setText(_translate("MainWindow", "Reset and Clear"))
    
    
    # =================================
    # Backend Communications Functions
    def press_it(self, input):
        if input == 1:
            self.option_1.setEnabled(False)  # Disable the option_1 button
            self.update_output("Contending Stocks...")
            self.worker.start()

    @pyQtSlot(int)
    def update_progress(self, value):
        self.progressBar.setValue(value)

    def handle_task_finished(self, message):
        self.update_output(message)
        # Always enable the reset button when the task is finished, regardless of the progress value
        self.reset_button.setEnabled(True)

    def handle_task_failed(self, message):
        self.update_output(f"Error: {message}")  # display the error message
        self.option_1.setEnabled(True)  # re-enable the option_1 button
        self.reset_button.setEnabled(False)  # disable the reset button

        
    
    # =================================
    
    # =================================
    # Output Text Functions
    
    def update_output(self, message):
        self.output_label.setText(message)
    
    def activate_button_clicked(self):
        org_id = self.api_key
        try:
            if validate_api_key(org_id): 
                self.option_picker_widget.show()
                self.activate_button.hide()  # Hide the button
                    
                # Get the current sizes
                lineEdit_width = self.api_key_input.width()
                activate_button_width = self.activate_button.width()
                    
                # Calculate new width and set it
                new_width = lineEdit_width + activate_button_width
                self.api_key_input.setFixedWidth(new_width)
                self.api_key_input.setReadOnly(True)
                self.api_key_label.setFixedWidth(new_width)
                    
                # Replace the QLineEdit text with asterisks of the same length as the API key
                self.api_key_input.setText('*' * len(org_id))
                    
                _translate = QtCore.QCoreApplication.translate
                self.api_key_label.setText(_translate("MainWindow", "API KEY accepted"))
                self.update_output("Waiting for option selection...")
        except Exception as e:
            self.api_key = ""  # Clear the api_key
            self.api_key_input.setText("")  # Clear the QLineEdit
            self.update_output(str(e))
                
    
    def handle_text_changed(self, text):
        if not self.api_key_entry_in_progress:
            if len(text) > len(self.api_key):  # Detects input or paste
                added_text = text[len(self.api_key):]  # Captures new input
                self.api_key += added_text  # Updates api_key
                self.api_key_entry_in_progress = True
                self.api_key_input.setText('*'*(len(text)-1) + text[-1]) # Updates display
                self.api_key_input.setCursorPosition(len(self.api_key))
                self.api_key_entry_in_progress = False
            elif len(self.api_key) > len(text):  # Detects backspace
                self.api_key = self.api_key[:len(text)]  # Trims api_key
                self.api_key_input.setText('*' * len(self.api_key))  # Updates display
                self.api_key_input.setCursorPosition(len(self.api_key))
                
    # This should be added where the reset button event is handled
    def reset_button_clicked(self):
        self.progressBar.setValue(0)  # Reset the progress bar
        self.output_label.setText('Waitng for option...')  # Clear the output
        self.option_1.setEnabled(True)  # Enable the option_1 button
        self.reset_button.setEnabled(False)
        gpt_driver.messages.clear()  # Clear the message history
           # Disconnect the signals
        self.worker.taskFinished.disconnect()
        self.worker.quit()
        self.worker.wait()

        # Create a new instance
        self.worker = Worker()

        # Reconnect the signals
        self.worker.taskFinished.connect(self.update_output)
        self.worker.taskFinished.connect(self.handle_task_finished)
        self.progress_tracker.reset()
    # =================================
    
# END OF APP CLASS
# =================================
    
def init_window():
    app = QApplication(sys.argv)
    MainWindow = Ui_MainWindow()

    # Load and set the stylesheet
    style_path = "packages/frontend/QtStyle/NeonButtons.qss"
    
    # Check if file exists before opening
    if os.path.isfile(style_path):
        file = QFile(style_path)
        file.open(QFile.ReadOnly | QFile.Text)
        stream = QTextStream(file)
        app.setStyleSheet(stream.readAll())
    else:
        print(f"Could not find stylesheet file at {style_path}")

    MainWindow.show()
    sys.exit(app.exec_())
